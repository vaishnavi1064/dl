import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
import matplotlib.pyplot as plt


url = '/content/1_boston_housing.csv'
data = pd.read_csv(url)

data.head()

X = data.drop('MEDV', axis=1)
y = data['MEDV']     

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)


model = Sequential()
model.add(Dense(1, input_dim=X_train.shape[1]))


model.compile(optimizer='adam', loss='mse', metrics=['mae'])


loss, mae = model.evaluate(X_test_scaled, y_test)
print(f'\nTest Loss (MSE): {loss:2f}')
print(f'Test MAE: {mae:2f}')


y_pred = model.predict(X_test_scaled)


rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)
print(f'\nRMSE: {rmse:.2f}')
print(f'RÂ² Score: {r2:.2f}')


plt.figure(figsize=(8,5))
plt.scatter(y_test,y_pred, color='purple')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual vs Predicted Housing Prices')
plt.grid(True)
plt.show()
